---

- name: Create required groups
  group:
    name: '{{ item.name if item.name|d() else item }}'
    system: '{{ item.system|bool if item.system is defined else gitlab_runner__system | bool }}'
    state: 'present'
  with_flattened:
    - '{{ gitlab_runner__group }}'
    - '{{ gitlab_runner__additional_groups }}'

- name: Create gitlab-runner user
  user:
    name: '{{ gitlab_runner__user }}'
    group: '{{ gitlab_runner__group }}'
    groups: '{{ gitlab_runner__additional_groups | map(attribute="name") | list | join(",") }}'
    append: True
    home: '{{ gitlab_runner__home }}'
    system: '{{ gitlab_runner__system | bool }}'
    comment: '{{ gitlab_runner__comment }}'
    shell: '{{ gitlab_runner__shell }}'
    state: 'present'
    generate_ssh_key: '{{ gitlab_runner__ssh_generate | bool }}'
    ssh_key_bits: '{{ gitlab_runner__ssh_generate_bits }}'

- name: Copy custom files to GitLab Runner host
  copy:
    src: '{{ item.src | d(omit) }}'
    content: '{{ item.content | d(omit) }}'
    dest: '{{ item.dest }}'
    owner: '{{ item.owner | d(omit) }}'
    group: '{{ item.group | d(omit) }}'
    mode: '{{ item.mode | d(omit) }}'
    directory_mode: '{{ item.directory_mode | d(omit) }}'
    follow: '{{ item.follow | d(omit) }}'
    force: '{{ item.force | d(omit) }}'
  with_flattened:
    - '{{ gitlab_runner__custom_files }}'
    - '{{ gitlab_runner__group_custom_files }}'
    - '{{ gitlab_runner__host_custom_files }}'
  when: ((item.src|d() or item.content|d()) and item.dest|d())

- name: Make sure APT can access HTTPS repositories
  apt:
    name: '{{ item }}'
    state: 'present'
    update_cache: True
    install_recommends: False
  with_items: [ 'apt-transport-https', 'openssl', 'ca-certificates' ]

- name: Add gitlab-runner APT key
  apt_key:
    id: '{{ gitlab_runner__apt_key }}'
    keyserver: '{{ ansible_local.core.keyserver
                   if (ansible_local|d() and ansible_local.core|d() and
                       ansible_local.core.keyserver)
                   else "hkp://pool.sks-keyservers.net" }}'
    state: 'present'
  when: gitlab_runner__apt_upstream|bool

- name: Configure gitlab-runner APT repository
  apt_repository:
    repo: '{{ gitlab_runner__apt_repo }}'
    state: 'present'
    update_cache: True
  when: gitlab_runner__apt_upstream|bool

- name: Install gitlab-runner packages
  apt:
    name: '{{ item }}'
    state: 'present'
    install_recommends: False
  with_flattened:
    - '{{ gitlab_runner__base_packages }}'
    - '{{ gitlab_runner__packages }}'

- name: Check if GitLab service is available
  uri:
    url: '{{ gitlab_runner__api_url }}'
  register: gitlab_runner__register_api
  when: gitlab_runner__api_url|d() and gitlab_runner__api_url
  failed_when: False

- name: Register new GitLab Runners
  uri:
    url: '{{ (item.api_url | d(gitlab_runner__api_url)) + "/api/v1/runners/register.json" }}'
    method: 'POST'
    body: 'token={{ item.token | d(gitlab_runner__token) }}&description={{ item.name | urlencode }}&tag_list={{ ((item.tags|d([]) + gitlab_runner__default_tags + gitlab_runner__tags + gitlab_runner__group_tags + gitlab_runner__host_tags) | unique | join(",")) | urlencode }}'
    status_code: '200,201'
  register: gitlab_runner__register_new_instances
  with_flattened:
    - '{{ gitlab_runner__default_instances }}'
    - '{{ gitlab_runner__instances }}'
    - '{{ gitlab_runner__group_instances }}'
    - '{{ gitlab_runner__host_instances }}'
  when: (gitlab_runner__register_api.status|d() and gitlab_runner__register_api.status == 200 and
         (item.token | d() or gitlab_runner__token) and item.name and
         (item.state is undefined or item.state != 'absent') and
         (ansible_local|d(True) and
          (ansible_local.gitlab_runner is undefined or
           item.name not in ansible_local.gitlab_runner.instances)))

- name: Generate gitlab-runner configuration file
  template:
    src: 'etc/gitlab-runner/config.toml.j2'
    dest: '/etc/gitlab-runner/config.toml'
    owner: 'root'
    group: 'root'
    mode: '0600'

- name: Delete GitLab Runners if requested
  uri:
    url: '{{ (item.0.api_url | d(gitlab_runner__api_url)) + "/api/v1/runners/delete" }}'
    method: 'DELETE'
    body: 'token={{ item.1.token }}'
  with_together:
    - '{{ gitlab_runner__default_instances + gitlab_runner__instances + gitlab_runner__group_instances + gitlab_runner__host_instances }}'
    - '{{ ansible_local.gitlab_runner.instance_tokens if (ansible_local|d() and ansible_local.gitlab_runner|d() and ansible_local.gitlab_runner.instance_tokens|d()) else [] }}'
  when: (gitlab_runner__register_api.status|d() and gitlab_runner__register_api.status == 200 and
         item.0.name|d() and item.1.name|d() and item.0.name == item.1.name and
         (item.0.state|d() and item.0.state == 'absent'))
  failed_when: False

- name: Get the SSH key from the remote host
  slurp:
    src: '~{{ gitlab_runner__user }}/.ssh/id_rsa.pub'
  register: gitlab_runner__register_ssh_key
  when: gitlab_runner__ssh_generate|bool

- name: Distribute SSH key to other hosts
  authorized_key:
    key: '{{ gitlab_runner__register_ssh_key.content | b64decode | trim }}'
    user: '{{ item.user }}'
    state: 'present'
    key_options: '{{ item.options | d() }}'
  delegate_to: '{{ item.host }}'
  become: '{{ item.become | d(True) }}'
  with_items: '{{ gitlab_runner__ssh_install_to }}'
  when: gitlab_runner__ssh_generate|bool and item.user|d() and item.host|d()

- name: Make sure that the ~/.ssh directory exists
  file:
    path: '{{ gitlab_runner__home }}/.ssh'
    state: 'directory'
    owner: '{{ gitlab_runner__user }}'
    group: '{{ gitlab_runner__group }}'
    mode: '0600'
  when: gitlab_runner__ssh_known_hosts

- name: Make sure the ~/.ssh/known_hosts file exists
  copy:
    content: ''
    dest: '{{ gitlab_runner__home }}/.ssh/known_hosts'
    owner: '{{ gitlab_runner__user }}'
    group: '{{ gitlab_runner__group }}'
    mode: '0644'
    force: False
  when: gitlab_runner__ssh_known_hosts

- name: Get list of already scanned host fingerprints
  shell: ssh-keygen -f {{ gitlab_runner__home }}/.ssh/known_hosts -F {{ item }} | grep -q '^# Host {{ item }} found'
  with_items: '{{ gitlab_runner__ssh_known_hosts }}'
  when: gitlab_runner__ssh_known_hosts
  register: gitlab_runner__register_known_hosts
  changed_when: False
  failed_when: False

- name: Scan SSH fingerprints of specified hosts
  shell: 'ssh-keyscan -H -T 10 {{ item.item }} >> {{ gitlab_runner__home + "/.ssh/known_hosts" }}'
  with_items: '{{ gitlab_runner__register_known_hosts.results }}'
  when: gitlab_runner__ssh_known_hosts and item is defined and item.rc > 0
  failed_when: False

- name: Make sure that Ansible fact directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save GitLab Runner local facts
  template:
    src: 'etc/ansible/facts.d/gitlab_runner.fact.j2'
    dest: '/etc/ansible/facts.d/gitlab_runner.fact'
    owner: 'root'
    group: 'root'
    mode: '0600'
